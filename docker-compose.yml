version: '3.8'

services:
  mysql-db:
    image: mysql:latest
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: 'periscope'
    ports:
      - "3306:3306"
    volumes:
      - mysql_db_volume:${PWD}/volumes


  mongo-db:
    container_name: mongo-db
    image: mongo:latest
    ports:
      - "27017:27017"
    hostname: mongo-db
    volumes:
      - mongodb_volume:${PWD}/volumes

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_volume:${PWD}/volumes

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    platform: linux/amd64
    ports:
      - "2181:2181"
    volumes:
      - kafka_zookeeper_volume:${PWD}/volumes

  spring-app:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    image: moonbse/backend:latest
    platform: linux/amd64
    depends_on:
      - kafka
      - mysql-db
      - mongo-db
    ports:
      - "8080:8080"
#    network_mode: bridge

  angular-app:
    container_name: frontend
#    build:
#      context: .
#      dockerfile: Dockerfile

    image: moonbse/periscope-frontend:latest
#    image: moonbse/periscope_frontend_local:amd64_local
    platform: linux/amd64
    ports:
      - "8085:80"
    depends_on:
      - spring-app
    environment:
      - NODE_ENV=production


volumes:
  mysql_db_volume:
  mongodb_volume:
  kafka_volume:
  kafka_zookeeper_volume:


